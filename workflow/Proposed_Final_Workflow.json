{
  "name": "Generate Findings Email",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "legal-analysis-upload",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "https://findingemail-0w07x.kinsta.page",
          "rawBody": false,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "https://findingemail-0w07x.kinsta.page"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS, GET"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              }
            ]
          }
        }
      },
      "id": "ce9f7ddf-b353-49df-a120-a87dc2ce9d49",
      "name": "Legal Document Upload Trigger1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -384,
        144
      ],
      "webhookId": "8dae70c2-fb03-45a9-983c-75dbaa62759b"
    },
    {
      "parameters": {
        "functionCode": "// This code processes binary data directly from the input item.\n// Using $items[0] is the most robust way to access data from a trigger.\nconst firstItem = $items[0];\nconst formData = firstItem.json;\nconst binaries = firstItem.binary;\n\nif (!binaries || Object.keys(binaries).length === 0) {\n  const headers = formData.headers || {};\n  const contentType = headers['content-type'] || 'not specified';\n  const errorMessage = 'No files found. Check that the webhook is receiving files. ' +\n    'Received Content-Type: ' + contentType + '. ' +\n    'Ensure the request is multipart/form-data and form fields for files are named correctly (e.g., intakeForm, caseDocument0).';\n  throw new Error(errorMessage);\n}\n\n// Extract case information from form data\nconst caseInfo = {\n  clientName: formData.clientName || 'Client',\n  caseReference: formData.caseReference || `CASE-${new Date().toISOString().split('T')[0]}`,\n  attorneyName: formData.attorneyName || 'Attorney',\n  processingDate: new Date().toISOString()\n};\n\n// Separate intake form from case documents\nlet intakeForm = null;\nconst caseDocuments = [];\n\nfor (const key of Object.keys(binaries)) {\n  const binaryData = binaries[key];\n  const base64Data = binaryData.toString('base64');\n  \n  const filename = binaryData.fileName || key;\n  const extension = filename.split('.').pop().toLowerCase();\n\n  if (key === 'intakeForm') {\n    intakeForm = {\n      name: filename,\n      extension: extension,\n      size: binaryData.length,\n      binaryKey: key,\n      category: 'intake',\n      base64Data: base64Data,\n      mimeType: binaryData.mimeType || 'application/octet-stream'\n    };\n  } else if (key.startsWith('caseDocument')) {\n    if (['pdf', 'docx', 'doc', 'txt', 'png', 'jpg', 'jpeg'].includes(extension)) {\n      caseDocuments.push({\n        name: filename,\n        extension: extension,\n        size: binaryData.length,\n        binaryKey: key,\n        category: 'case-document',\n        base64Data: base64Data,\n        mimeType: binaryData.mimeType || 'application/octet-stream',\n        needsOCR: ['pdf', 'png', 'jpg', 'jpeg'].includes(extension)\n      });\n    }\n  }\n}\n\nif (!intakeForm) {\n  throw new Error('Intake form is required for legal analysis.');\n}\n\nif (caseDocuments.length === 0) {\n  throw new Error('At least one case document is required for analysis.');\n}\n\n// Create the new JSON structure for the output\nconst newJson = {\n  caseInfo: caseInfo,\n  intakeForm: intakeForm,\n  caseDocuments: caseDocuments,\n  totalDocuments: caseDocuments.length + 1,\n  processingTimestamp: new Date().toISOString()\n};\n\n// Return a new item with the structured data. The original binary data is discarded.\nreturn [{ json: newJson }];"
      },
      "id": "9da8f24e-42e6-4126-8a04-d47d47a71f3b",
      "name": "Process Upload Structure1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -192,
        144
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://brfloridadocs.cognitiveservices.azure.com/formrecognizer/documentModels/prebuilt-read:analyze?api-version=2023-07-31",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "92986807-18a9-4f53-a0b8-3b3dd3a6a169",
      "name": "Extract Intake Form Text (Azure)1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        0,
        0
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "xMaO20ISy28aXEDO",
          "name": "azureDocumentIntelligence"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Process Azure Document Intelligence response for intake form\nconst azureResponse = $json;\nconst intakeData = $node[\"Process Upload Structure1\"].json;\n\n// Extract operation location for polling\nconst operationLocation = azureResponse.headers?.['operation-location'] || azureResponse['operation-location'];\n\nif (!operationLocation) {\n  throw new Error('No operation location received from Azure Document Intelligence');\n}\n\nreturn {\n  operationLocation: operationLocation,\n  intakeForm: intakeData.intakeForm,\n  caseInfo: intakeData.caseInfo,\n  processingType: 'intake-form'\n};"
      },
      "id": "5a26f85a-ac15-4f2e-8999-016ee69652ac",
      "name": "Process Azure Intake Response1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        192,
        0
      ]
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "id": "f42f553c-ac29-4367-8e81-e2fabde3cdfb",
      "name": "Wait for Intake Processing1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        384,
        0
      ],
      "webhookId": "a0a86d21-a3ee-479f-b7b9-4d6d4abc8cf8"
    },
    {
      "parameters": {
        "url": "={{$json.operationLocation}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "c7d31228-808c-49e6-98d1-a384f23b24e5",
      "name": "Get Intake OCR Results1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        576,
        0
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "xMaO20ISy28aXEDO",
          "name": "azureDocumentIntelligence"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are a legal document analyst specializing in intake form analysis. Extract structured information from client intake forms and return it as JSON.\"}, {\"role\": \"user\", \"content\": \"Please analyze this legal intake form text and extract key information as JSON with these fields: clientName, contactInfo, legalIssue, caseType, desiredOutcome, urgency, parties, timeline, keyFacts, documentTypes. Intake form text: \" + ($json.analyzeResult?.content || 'No text extracted')}]"
            },
            {
              "name": "max_tokens",
              "value": 1500
            },
            {
              "name": "temperature",
              "value": 0.3
            }
          ]
        },
        "options": {}
      },
      "id": "01b3e561-58f5-41ef-ae2c-7e23358795e9",
      "name": "Analyze Intake Form with GPT-4o Mini1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        768,
        0
      ],
      "credentials": {
        "openAiApi": {
          "id": "Cw2fFTz1VBPuCSPE",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Process GPT-4o Mini intake form analysis\nconst intakeData = $node[\"Process Upload Structure1\"].json;\nconst azureOCR = $node[\"Get Intake OCR Results\"].json;\nconst gptResponse = $json;\n\n// Extract the response content\nconst responseContent = gptResponse.choices[0].message.content;\n\n// Parse the JSON response from GPT-4o Mini\nlet extractedInfo;\ntry {\n  const jsonMatch = responseContent.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    extractedInfo = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  extractedInfo = {\n    clientName: intakeData.caseInfo.clientName,\n    legalIssue: 'Legal matter requiring analysis',\n    caseType: 'General Legal Matter',\n    desiredOutcome: 'Resolution of legal matter',\n    urgency: 'Standard',\n    parties: [],\n    timeline: [],\n    keyFacts: [],\n    documentTypes: []\n  };\n}\n\nconst processedIntakeInfo = {\n  clientName: extractedInfo.clientName || intakeData.caseInfo.clientName,\n  contactInfo: extractedInfo.contactInfo || {},\n  legalIssue: extractedInfo.legalIssue || 'Legal matter requiring analysis',\n  caseType: extractedInfo.caseType || 'General Legal Matter',\n  desiredOutcome: extractedInfo.desiredOutcome || 'Resolution of legal matter',\n  urgency: extractedInfo.urgency || 'Standard',\n  parties: extractedInfo.parties || [],\n  timeline: extractedInfo.timeline || [],\n  keyFacts: extractedInfo.keyFacts || [],\n  documentTypes: extractedInfo.documentTypes || []\n};\n\nconst intakeAnalysis = {\n  documentName: intakeData.intakeForm.name,\n  extractedText: azureOCR.analyzeResult?.content || '',\n  gptAnalysis: responseContent,\n  caseType: processedIntakeInfo.caseType,\n  clientInformation: processedIntakeInfo,\n  processingTimestamp: new Date().toISOString(),\n  confidence: 0.95\n};\n\nreturn {\n  intakeAnalysis: intakeAnalysis,\n  caseInfo: intakeData.caseInfo,\n  caseDocuments: intakeData.caseDocuments\n};"
      },
      "id": "150d1ff4-b84a-4f74-a912-3ed5d2413b0c",
      "name": "Process Intake Analysis1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        960,
        0
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "0d5311b9-21f7-4550-9b82-8bff6d887d0b",
      "name": "Split Case Documents1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        0,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "c1fa3f7b-8c4a-4d82-9fd6-c14c3f5b9c5e",
              "leftValue": "={{ $json.needsOCR }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "158d9049-12d0-4cfc-acc7-df8cce399f7f",
      "name": "Check if Needs OCR1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        192,
        240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://brfloridadocs.cognitiveservices.azure.com/formrecognizer/documentModels/prebuilt-read:analyze?api-version=2023-07-31",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "azureDocumentIntelligence",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Ocp-Apim-Subscription-Key",
              "value": "={{$credentials.azureDocumentIntelligence.subscriptionKey}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "9c118fc9-2dc9-40cd-990e-335f55b363af",
      "name": "Extract Document Text (Azure)1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        384,
        176
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process Azure Document Intelligence response for case document\nconst azureResponse = $json;\nconst documentData = $node[\"Split Case Documents\"].json;\n\n// Extract operation location for polling\nconst operationLocation = azureResponse.headers?.['operation-location'] || azureResponse['operation-location'];\n\nif (!operationLocation) {\n  throw new Error('No operation location received from Azure Document Intelligence');\n}\n\nreturn {\n  operationLocation: operationLocation,\n  documentData: documentData,\n  processingType: 'case-document'\n};"
      },
      "id": "48582543-5cc4-4c2b-bcad-7e43956e5600",
      "name": "Process Azure Case Response1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        576,
        176
      ]
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "id": "48d176f3-183b-4e4b-be39-99ba06d1dc4e",
      "name": "Wait for Case Processing1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        768,
        176
      ],
      "webhookId": "13b6b222-5f82-49d4-ab31-5c498afc0fea"
    },
    {
      "parameters": {
        "url": "={{$json.operationLocation}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "418b050a-4f43-4209-bd17-67f179393b32",
      "name": "Get Case OCR Results1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        960,
        176
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "xMaO20ISy28aXEDO",
          "name": "azureDocumentIntelligence"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Pass through document data for non-OCR files\nconst documentData = $node[\"Split Case Documents\"].json;\n\nreturn {\n  documentData: documentData,\n  analyzeResult: {\n    content: documentData.base64Data ? Buffer.from(documentData.base64Data, 'base64').toString('utf8') : 'No text content available'\n  }\n};"
      },
      "id": "defef7f3-bc3f-44e1-9db2-718e8e96aa08",
      "name": "Pass Through Text Files1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        384,
        304
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "id": "8648f5e2-b91b-418c-9e3d-6c759fa3422e",
      "name": "Merge OCR Paths1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1152,
        240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{$json.mimeType}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are a legal document analyst. Analyze legal documents and extract key information as JSON.\"}, {\"role\": \"user\", \"content\": \"Analyze this legal document and return JSON with: documentType, confidence, legalConcepts, financialElements, timelineElements, legalSummary, keyFindings, riskAssessment, relevanceScore. Document name: \" + ($json.documentData?.name || 'Unknown') + \", Content: \" + (($json.analyzeResult?.content || '').substring(0, 8000))}]"
            },
            {
              "name": "max_tokens",
              "value": 2000
            },
            {
              "name": "temperature",
              "value": 0.3
            }
          ]
        },
        "options": {}
      },
      "id": "a5b4b457-766e-4d3e-b52e-7760b3b24189",
      "name": "Analyze Case Document with GPT-4o Mini1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1344,
        240
      ],
      "credentials": {
        "openAiApi": {
          "id": "Cw2fFTz1VBPuCSPE",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Process GPT-4o Mini case document analysis\nconst documentData = $json.documentData || $node[\"Split Case Documents\"].json;\nconst ocrResults = $json.analyzeResult || {};\nconst gptResponse = $json;\n\n// Extract the response content\nconst responseContent = gptResponse.choices[0].message.content;\n\n// Parse the JSON response from GPT-4o Mini\nlet analysisResult;\ntry {\n  const jsonMatch = responseContent.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    analysisResult = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  analysisResult = {\n    documentType: 'General Legal Document',\n    confidence: 0.8,\n    legalConcepts: {\n      liabilityTerms: [],\n      disclosureTerms: [],\n      contractualTerms: [],\n      propertyTerms: [],\n      damagesTerms: [],\n      riskIndicators: []\n    },\n    financialElements: [],\n    timelineElements: [],\n    partyReferences: [],\n    legalCitations: [],\n    legalSummary: 'Document analysis completed',\n    keyFindings: [],\n    riskAssessment: 'Standard risk profile',\n    relevanceScore: 5\n  };\n}\n\nconst processedAnalysis = {\n  documentName: documentData.name,\n  documentType: analysisResult.documentType || 'General Legal Document',\n  extension: documentData.extension.toUpperCase(),\n  fileSize: documentData.size,\n  pageCount: analysisResult.pageCount || 1,\n  confidence: analysisResult.confidence || 0.8,\n  confidenceLevel: (analysisResult.confidence || 0.8) > 0.8 ? 'High' : (analysisResult.confidence || 0.8) > 0.6 ? 'Medium' : 'Low',\n  relevanceScore: Math.min(analysisResult.relevanceScore || 5, 10),\n  processingTimestamp: new Date().toISOString(),\n  \n  extractedText: ocrResults.content || '',\n  gptAnalysis: responseContent,\n  legalSummary: analysisResult.legalSummary || 'Document analysis completed',\n  keyFindings: analysisResult.keyFindings || [],\n  riskAssessment: analysisResult.riskAssessment || 'Standard risk profile',\n  \n  legalConcepts: {\n    liabilityTerms: analysisResult.legalConcepts?.liabilityTerms || [],\n    disclosureTerms: analysisResult.legalConcepts?.disclosureTerms || [],\n    contractualTerms: analysisResult.legalConcepts?.contractualTerms || [],\n    propertyTerms: analysisResult.legalConcepts?.propertyTerms || [],\n    damagesTerms: analysisResult.legalConcepts?.damagesTerms || [],\n    riskIndicators: analysisResult.legalConcepts?.riskIndicators || [],\n    financialElements: analysisResult.financialElements || [],\n    timelineElements: analysisResult.timelineElements || [],\n    partyReferences: analysisResult.partyReferences || [],\n    legalCitations: analysisResult.legalCitations || []\n  },\n  \n  hasLiabilityContent: analysisResult.hasLiabilityContent || false,\n  hasDisclosureContent: analysisResult.hasDisclosureContent || false,\n  hasContractualContent: analysisResult.hasContractualContent || false,\n  hasPropertyIssues: analysisResult.hasPropertyIssues || false,\n  hasFinancialTerms: analysisResult.hasFinancialTerms || false,\n  hasRiskIndicators: analysisResult.hasRiskIndicators || false,\n  hasDamagesContent: (analysisResult.legalConcepts?.damagesTerms || []).length > 0,\n  hasLegalCitations: (analysisResult.legalCitations || []).length > 0\n};\n\nreturn {\n  analysis: processedAnalysis\n};"
      },
      "id": "71a06cda-2e5d-4ebc-8b22-c485c7134aab",
      "name": "Process Case Document Analysis1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1536,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// This node aggregates all the individual document analyses into a single item.\nconst allItems = $items;\nconst analyses = allItems.map(item => item.json.analysis);\n\n// Return a single item with an array of all analyses.\nreturn [{\n  json: {\n    caseDocumentAnalyses: analyses\n  }\n}];"
      },
      "id": "74a1c17e-ca7b-44c5-9bdf-4921109b9dc1",
      "name": "Combine Case Document Analyses1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1728,
        240
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "id": "824c2154-7410-42ec-80ca-229970d15f6e",
      "name": "Merge All Analyses1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1936,
        144
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are a senior attorney at Bernhardt Riley, Attorneys at Law, PLLC. Generate professional legal findings letters based on comprehensive document analysis.\"}, {\"role\": \"user\", \"content\": \"Generate a professional legal findings letter based on this comprehensive analysis. Client: \" + $input.first().json.caseInfo.clientName + \", Case: \" + $input.first().json.caseInfo.caseReference + \", Attorney: \" + $input.first().json.caseInfo.attorneyName + \". Include formal letterhead, greeting, executive summary, detailed document review findings, legal analysis with risk assessment, strategic recommendations, and next steps. Make it professional and actionable.\"}]"
            },
            {
              "name": "max_tokens",
              "value": 4000
            },
            {
              "name": "temperature",
              "value": 0.4
            }
          ]
        },
        "options": {}
      },
      "id": "2f28fc37-afdf-4557-92d6-d1a7e712a78b",
      "name": "Generate Findings Letter with GPT-4o1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2144,
        144
      ],
      "credentials": {
        "openAiApi": {
          "id": "Cw2fFTz1VBPuCSPE",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Process GPT-4o findings letter and create comprehensive response\nconst item = $item;\nconst gptResponse = item.json;\n\n// Extract the findings letter from GPT-4o response\nconst findingsLetter = gptResponse.choices[0].message.content;\n\n// Get case information from the same item\nconst intakeAnalysis = item.json.intakeAnalysis;\nconst caseInfo = item.json.caseInfo;\nconst caseDocumentAnalyses = item.json.caseDocumentAnalyses;\n\n// Generate detailed case analysis report\nconst detailedCaseAnalysis = {\n  caseReference: caseInfo.caseReference,\n  clientName: intakeAnalysis.clientInformation.clientName || caseInfo.clientName,\n  attorneyName: caseInfo.attorneyName,\n  analysisDate: new Date().toISOString(),\n  caseType: intakeAnalysis.caseType,\n  urgencyLevel: intakeAnalysis.clientInformation.urgency,\n  totalDocuments: caseDocumentAnalyses.length + 1,\n  averageConfidence: caseDocumentAnalyses.length > 0 ? Math.round(caseDocumentAnalyses.reduce((sum, doc) => sum + doc.confidence, 0) / caseDocumentAnalyses.length * 100) + '%' : '95%',\n  \n  // Document breakdown\n  documentTypes: caseDocumentAnalyses.reduce((types, doc) => {\n    types[doc.documentType] = (types[doc.documentType] || 0) + 1;\n    return types;\n  }, {}),\n  \n  // Aggregated legal concepts\n  legalConceptsSummary: {\n    liabilityTerms: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.liabilityTerms))],\n    disclosureTerms: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.disclosureTerms))],\n    contractualTerms: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.contractualTerms))],\n    propertyTerms: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.propertyTerms))],\n    financialElements: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.financialElements))],\n    riskIndicators: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.riskIndicators))],\n    timelineElements: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.timelineElements))],\n    legalCitations: [...new Set(caseDocumentAnalyses.flatMap(doc => doc.legalConcepts.legalCitations))]\n  },\n  \n  // Document details\n  documentDetails: caseDocumentAnalyses.map(doc => ({\n    name: doc.documentName,\n    type: doc.documentType,\n    confidence: Math.round(doc.confidence * 100) + '%',\n    relevanceScore: doc.relevanceScore.toFixed(1),\n    pages: doc.pageCount,\n    keyFindings: {\n      hasLiability: doc.hasLiabilityContent,\n      hasDisclosure: doc.hasDisclosureContent,\n      hasContractual: doc.hasContractualContent,\n      hasProperty: doc.hasPropertyIssues,\n      hasRisk: doc.hasRiskIndicators,\n      hasDamages: doc.hasDamagesContent\n    },\n    summary: doc.legalSummary,\n    riskAssessment: doc.riskAssessment\n  })),\n  \n  // Intake form analysis\n  intakeFormAnalysis: {\n    confidence: Math.round(intakeAnalysis.confidence * 100) + '%',\n    extractedInfo: intakeAnalysis.clientInformation,\n    caseClassification: intakeAnalysis.caseType,\n    ocrEnabled: true,\n    aiModel: 'GPT-4o Mini + Azure Document Intelligence'\n  }\n};\n\n// Generate executive summary\nconst executiveSummary = `EXECUTIVE SUMMARY\\n\\nCase: ${caseInfo.caseReference}\\nClient: ${intakeAnalysis.clientInformation.clientName || caseInfo.clientName}\\nAttorney: ${caseInfo.attorneyName}\\nCase Type: ${intakeAnalysis.caseType}\\nAnalysis Date: ${new Date().toLocaleDateString()}\\nUrgency: ${intakeAnalysis.clientInformation.urgency}\\n\\nDOCUMENT ANALYSIS OVERVIEW:\\n- Total Documents Analyzed: ${caseDocumentAnalyses.length + 1}\\n- Average AI Confidence: ${detailedCaseAnalysis.averageConfidence}\\n- OCR Processing: Azure Document Intelligence\\n- AI Analysis: GPT-4o Mini + GPT-4o\\n- Document Types: ${Object.entries(detailedCaseAnalysis.documentTypes).map(([type, count]) => `${type} (${count})`).join(', ')}\\n\\nKEY LEGAL CONCEPTS IDENTIFIED:\\n${detailedCaseAnalysis.legalConceptsSummary.liabilityTerms.length > 0 ? `- Liability Issues: ${detailedCaseAnalysis.legalConceptsSummary.liabilityTerms.slice(0, 5).join(', ')}\\n` : ''}${detailedCaseAnalysis.legalConceptsSummary.disclosureTerms.length > 0 ? `- Disclosure Matters: ${detailedCaseAnalysis.legalConceptsSummary.disclosureTerms.slice(0, 5).join(', ')}\\n` : ''}${detailedCaseAnalysis.legalConceptsSummary.financialElements.length > 0 ? `- Financial Elements: ${detailedCaseAnalysis.legalConceptsSummary.financialElements.slice(0, 5).join(', ')}\\n` : ''}\\n\\nDOCUMENT SUMMARIES:\\n${caseDocumentAnalyses.map(doc => `- ${doc.documentName}: ${doc.legalSummary}`).join('\\n')}\\n\\nRECOMMENDATIONS:\\n- Proceed with ${intakeAnalysis.clientInformation.urgency === 'Critical' ? 'immediate legal action' : 'standard legal strategy development'}\\n- Review findings letter for detailed analysis and next steps\\n- Maintain comprehensive documentation for potential litigation\\n\\n---\\nGenerated by Enhanced Legal Document Analysis System\\nBernhardt Riley, Attorneys at Law, PLLC\\nPowered by Azure Document Intelligence + GPT-4o`;\n\nreturn {\n  professionalFindingsLetter: findingsLetter,\n  detailedCaseAnalysis: detailedCaseAnalysis,\n  executiveSummary: executiveSummary,\n  caseInfo: caseInfo,\n  processingStats: {\n    totalDocuments: detailedCaseAnalysis.totalDocuments,\n    ocrProcessed: caseDocumentAnalyses.filter(doc => doc.extractedText).length,\n    aiModel: 'GPT-4o + GPT-4o Mini',\n    ocrProvider: 'Azure Document Intelligence',\n    processingTime: new Date().toISOString()\n  }\n};"
      },
      "id": "bcb1e262-80ac-4416-9ab6-8d3cedeec9ac",
      "name": "Process Final Analysis1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2352,
        144
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Professional legal document analysis completed successfully using Azure Document Intelligence + GPT-4o\",\n  \"caseReference\": {{JSON.stringify($json.caseInfo.caseReference)}},\n  \"clientName\": {{JSON.stringify($json.detailedCaseAnalysis.clientName)}},\n  \"attorneyName\": {{JSON.stringify($json.detailedCaseAnalysis.attorneyName)}},\n  \"documentsProcessed\": {{$json.detailedCaseAnalysis.totalDocuments}},\n  \"analysisType\": {{JSON.stringify($json.detailedCaseAnalysis.caseType)}},\n  \"urgencyLevel\": {{JSON.stringify($json.detailedCaseAnalysis.urgencyLevel)}},\n  \"processingStats\": {{JSON.stringify($json.processingStats)}},\n  \"downloadableFiles\": {\n    \"findingsLetter\": {\n      \"filename\": \"Findings_Letter_\" + {{JSON.stringify($json.caseInfo.caseReference)}} + \"_\" + {{JSON.stringify(new Date().toISOString().split('T')[0])}} + \".txt\",\n      \"content\": {{JSON.stringify($json.professionalFindingsLetter)}},\n      \"type\": \"Professional Legal Findings Letter\"\n    },\n    \"caseAnalysis\": {\n      \"filename\": \"Case_Analysis_\" + {{JSON.stringify($json.caseInfo.caseReference)}} + \"_\" + {{JSON.stringify(new Date().toISOString().split('T')[0])}} + \".json\",\n      \"content\": {{JSON.stringify($json.detailedCaseAnalysis, null, 2)}},\n      \"type\": \"Comprehensive Case Analysis\"\n    },\n    \"executiveSummary\": {\n      \"filename\": \"Executive_Summary_\" + {{JSON.stringify($json.caseInfo.caseReference)}} + \"_\" + {{JSON.stringify(new Date().toISOString().split('T')[0])}} + \".txt\",\n      \"content\": {{JSON.stringify($json.executiveSummary)}},\n      \"type\": \"Executive Summary\"\n    }\n  },\n  \"analysisResults\": {{JSON.stringify($json.detailedCaseAnalysis)}}\n}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "627b8662-3dde-4fce-832a-c959ed721503",
      "name": "Return Professional Analysis Results1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2560,
        144
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Legal Document Upload Trigger1": {
      "main": [
        [
          {
            "node": "Process Upload Structure1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Upload Structure1": {
      "main": [
        [
          {
            "node": "Extract Intake Form Text (Azure)1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Case Documents1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Intake Form Text (Azure)1": {
      "main": [
        [
          {
            "node": "Process Azure Intake Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Azure Intake Response1": {
      "main": [
        [
          {
            "node": "Wait for Intake Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Intake Processing1": {
      "main": [
        [
          {
            "node": "Get Intake OCR Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Intake OCR Results1": {
      "main": [
        [
          {
            "node": "Analyze Intake Form with GPT-4o Mini1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Intake Form with GPT-4o Mini1": {
      "main": [
        [
          {
            "node": "Process Intake Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Intake Analysis1": {
      "main": [
        [
          {
            "node": "Merge All Analyses1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Case Documents1": {
      "main": [
        [
          {
            "node": "Check if Needs OCR1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Needs OCR1": {
      "main": [
        [
          {
            "node": "Extract Document Text (Azure)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pass Through Text Files1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text (Azure)1": {
      "main": [
        [
          {
            "node": "Process Azure Case Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Azure Case Response1": {
      "main": [
        [
          {
            "node": "Wait for Case Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Case Processing1": {
      "main": [
        [
          {
            "node": "Get Case OCR Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Case OCR Results1": {
      "main": [
        [
          {
            "node": "Merge OCR Paths1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Through Text Files1": {
      "main": [
        [
          {
            "node": "Merge OCR Paths1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge OCR Paths1": {
      "main": [
        [
          {
            "node": "Analyze Case Document with GPT-4o Mini1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Case Document with GPT-4o Mini1": {
      "main": [
        [
          {
            "node": "Process Case Document Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Case Document Analysis1": {
      "main": [
        [
          {
            "node": "Combine Case Document Analyses1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Case Document Analyses1": {
      "main": [
        [
          {
            "node": "Merge All Analyses1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge All Analyses1": {
      "main": [
        [
          {
            "node": "Generate Findings Letter with GPT-4o1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Findings Letter with GPT-4o1": {
      "main": [
        [
          {
            "node": "Process Final Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Final Analysis1": {
      "main": [
        [
          {
            "node": "Return Professional Analysis Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4e2b8dc2-f42f-468c-bd47-c249942ab798",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "caf5cb14368ca22f9a1df26d6f7341ec146b18cf99462801227bcf1262e8aef4"
  },
  "id": "QsSMlewbcELEU9md",
  "tags": []
}